// Code generated by protoc-gen-go. DO NOT EDIT.
// source: binlog.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MutationType int32

const (
	MutationType_Insert    MutationType = 0
	MutationType_Update    MutationType = 1
	MutationType_DeleteID  MutationType = 2
	MutationType_DeletePK  MutationType = 3
	MutationType_DeleteRow MutationType = 4
)

var MutationType_name = map[int32]string{
	0: "Insert",
	1: "Update",
	2: "DeleteID",
	3: "DeletePK",
	4: "DeleteRow",
}

var MutationType_value = map[string]int32{
	"Insert":    0,
	"Update":    1,
	"DeleteID":  2,
	"DeletePK":  3,
	"DeleteRow": 4,
}

func (x MutationType) String() string {
	return proto.EnumName(MutationType_name, int32(x))
}

func (MutationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{0}
}

type BinlogType int32

const (
	BinlogType_Prewrite BinlogType = 0
	BinlogType_Commit   BinlogType = 1
	BinlogType_Rollback BinlogType = 2
	BinlogType_PreDDL   BinlogType = 3
	BinlogType_PostDDL  BinlogType = 4
)

var BinlogType_name = map[int32]string{
	0: "Prewrite",
	1: "Commit",
	2: "Rollback",
	3: "PreDDL",
	4: "PostDDL",
}

var BinlogType_value = map[string]int32{
	"Prewrite": 0,
	"Commit":   1,
	"Rollback": 2,
	"PreDDL":   3,
	"PostDDL":  4,
}

func (x BinlogType) String() string {
	return proto.EnumName(BinlogType_name, int32(x))
}

func (BinlogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{1}
}

// TableMutation contains mutations in a table.
type TableMutation struct {
	TableId int64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// The inserted row contains all column values.
	InsertedRows [][]byte `protobuf:"bytes,2,rep,name=inserted_rows,json=insertedRows,proto3" json:"inserted_rows,omitempty"`
	// The updated row contains old values and new values of the row.
	UpdatedRows [][]byte `protobuf:"bytes,3,rep,name=updated_rows,json=updatedRows,proto3" json:"updated_rows,omitempty"`
	// Obsolete field.
	DeletedIds []int64 `protobuf:"varint,4,rep,packed,name=deleted_ids,json=deletedIds,proto3" json:"deleted_ids,omitempty"`
	// Obsolete field.
	DeletedPks [][]byte `protobuf:"bytes,5,rep,name=deleted_pks,json=deletedPks,proto3" json:"deleted_pks,omitempty"`
	// The row value of the deleted row.
	DeletedRows [][]byte `protobuf:"bytes,6,rep,name=deleted_rows,json=deletedRows,proto3" json:"deleted_rows,omitempty"`
	// Used to apply table mutations in original sequence.
	Sequence             []MutationType `protobuf:"varint,7,rep,packed,name=sequence,proto3,enum=pb.MutationType" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TableMutation) Reset()         { *m = TableMutation{} }
func (m *TableMutation) String() string { return proto.CompactTextString(m) }
func (*TableMutation) ProtoMessage()    {}
func (*TableMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{0}
}

func (m *TableMutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableMutation.Unmarshal(m, b)
}
func (m *TableMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableMutation.Marshal(b, m, deterministic)
}
func (m *TableMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableMutation.Merge(m, src)
}
func (m *TableMutation) XXX_Size() int {
	return xxx_messageInfo_TableMutation.Size(m)
}
func (m *TableMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_TableMutation.DiscardUnknown(m)
}

var xxx_messageInfo_TableMutation proto.InternalMessageInfo

func (m *TableMutation) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *TableMutation) GetInsertedRows() [][]byte {
	if m != nil {
		return m.InsertedRows
	}
	return nil
}

func (m *TableMutation) GetUpdatedRows() [][]byte {
	if m != nil {
		return m.UpdatedRows
	}
	return nil
}

func (m *TableMutation) GetDeletedIds() []int64 {
	if m != nil {
		return m.DeletedIds
	}
	return nil
}

func (m *TableMutation) GetDeletedPks() [][]byte {
	if m != nil {
		return m.DeletedPks
	}
	return nil
}

func (m *TableMutation) GetDeletedRows() [][]byte {
	if m != nil {
		return m.DeletedRows
	}
	return nil
}

func (m *TableMutation) GetSequence() []MutationType {
	if m != nil {
		return m.Sequence
	}
	return nil
}

type PrewriteValue struct {
	SchemaVersion        int64            `protobuf:"varint,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	Mutations            []*TableMutation `protobuf:"bytes,2,rep,name=mutations,proto3" json:"mutations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PrewriteValue) Reset()         { *m = PrewriteValue{} }
func (m *PrewriteValue) String() string { return proto.CompactTextString(m) }
func (*PrewriteValue) ProtoMessage()    {}
func (*PrewriteValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{1}
}

func (m *PrewriteValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrewriteValue.Unmarshal(m, b)
}
func (m *PrewriteValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrewriteValue.Marshal(b, m, deterministic)
}
func (m *PrewriteValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrewriteValue.Merge(m, src)
}
func (m *PrewriteValue) XXX_Size() int {
	return xxx_messageInfo_PrewriteValue.Size(m)
}
func (m *PrewriteValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PrewriteValue.DiscardUnknown(m)
}

var xxx_messageInfo_PrewriteValue proto.InternalMessageInfo

func (m *PrewriteValue) GetSchemaVersion() int64 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func (m *PrewriteValue) GetMutations() []*TableMutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

// Binlog contains all the changes in a transaction, which can be used to reconstruct SQL statement, then export to
// other systems.
type Binlog struct {
	Tp BinlogType `protobuf:"varint,1,opt,name=tp,proto3,enum=pb.BinlogType" json:"tp,omitempty"`
	// start_ts is used in Prewrite, Commit and Rollback binlog Type.
	// It is used for pairing prewrite log to commit log or rollback log.
	StartTs int64 `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	// commit_ts is used only in binlog type Commit.
	CommitTs int64 `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	// prewrite key is used only in Prewrite binlog type.
	// It is the primary key of the transaction, is used to check that the transaction is
	// commited or not if it failed to pair to commit log or rollback log within a time window.
	PrewriteKey []byte `protobuf:"bytes,4,opt,name=prewrite_key,json=prewriteKey,proto3" json:"prewrite_key,omitempty"`
	// prewrite_data is marshalled from PrewriteData type,
	// we do not need to unmarshal prewrite data before the binlog have been successfully paired.
	PrewriteValue []byte `protobuf:"bytes,5,opt,name=prewrite_value,json=prewriteValue,proto3" json:"prewrite_value,omitempty"`
	// ddl_query is the original DDL statement query.
	DdlQuery []byte `protobuf:"bytes,6,opt,name=ddl_query,json=ddlQuery,proto3" json:"ddl_query,omitempty"`
	// ddl_job_id is used for DDL Binlog.
	// If ddl_job_id is setted, this is a DDL Binlog and ddl_query contains the DDL query, we can query the informations about this job from TiKV.
	DdlJobId             int64    `protobuf:"varint,7,opt,name=ddl_job_id,json=ddlJobId,proto3" json:"ddl_job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Binlog) Reset()         { *m = Binlog{} }
func (m *Binlog) String() string { return proto.CompactTextString(m) }
func (*Binlog) ProtoMessage()    {}
func (*Binlog) Descriptor() ([]byte, []int) {
	return fileDescriptor_07ff5a43190a1b8c, []int{2}
}

func (m *Binlog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Binlog.Unmarshal(m, b)
}
func (m *Binlog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Binlog.Marshal(b, m, deterministic)
}
func (m *Binlog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Binlog.Merge(m, src)
}
func (m *Binlog) XXX_Size() int {
	return xxx_messageInfo_Binlog.Size(m)
}
func (m *Binlog) XXX_DiscardUnknown() {
	xxx_messageInfo_Binlog.DiscardUnknown(m)
}

var xxx_messageInfo_Binlog proto.InternalMessageInfo

func (m *Binlog) GetTp() BinlogType {
	if m != nil {
		return m.Tp
	}
	return BinlogType_Prewrite
}

func (m *Binlog) GetStartTs() int64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *Binlog) GetCommitTs() int64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *Binlog) GetPrewriteKey() []byte {
	if m != nil {
		return m.PrewriteKey
	}
	return nil
}

func (m *Binlog) GetPrewriteValue() []byte {
	if m != nil {
		return m.PrewriteValue
	}
	return nil
}

func (m *Binlog) GetDdlQuery() []byte {
	if m != nil {
		return m.DdlQuery
	}
	return nil
}

func (m *Binlog) GetDdlJobId() int64 {
	if m != nil {
		return m.DdlJobId
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.MutationType", MutationType_name, MutationType_value)
	proto.RegisterEnum("pb.BinlogType", BinlogType_name, BinlogType_value)
	proto.RegisterType((*TableMutation)(nil), "pb.TableMutation")
	proto.RegisterType((*PrewriteValue)(nil), "pb.PrewriteValue")
	proto.RegisterType((*Binlog)(nil), "pb.Binlog")
}

func init() { proto.RegisterFile("binlog.proto", fileDescriptor_07ff5a43190a1b8c) }

var fileDescriptor_07ff5a43190a1b8c = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0xdd, 0x8e, 0xda, 0x3e,
	0x10, 0xc5, 0x37, 0x09, 0xcb, 0xc7, 0x90, 0xa0, 0xfc, 0xad, 0xff, 0x45, 0xd4, 0x4a, 0x40, 0x69,
	0x2b, 0xa1, 0x6d, 0x45, 0x25, 0xaa, 0xbe, 0x00, 0xe5, 0x86, 0x6e, 0x57, 0x62, 0x23, 0xba, 0xb7,
	0x51, 0x82, 0x2d, 0x9a, 0x12, 0xb0, 0x37, 0x76, 0x16, 0xf1, 0x0c, 0x7d, 0xb1, 0xbd, 0xec, 0x13,
	0x54, 0x15, 0xef, 0x51, 0xa9, 0xf2, 0x38, 0xe1, 0xe3, 0x2e, 0x73, 0xe6, 0xe7, 0x39, 0xc9, 0x19,
	0x07, 0xdc, 0x24, 0xdd, 0x66, 0x7c, 0x35, 0x12, 0x39, 0x57, 0x9c, 0xd8, 0x22, 0x79, 0xf1, 0xff,
	0x8a, 0xaf, 0x38, 0x96, 0x1f, 0xf4, 0x93, 0xe9, 0x0c, 0x7e, 0xda, 0xe0, 0x2d, 0xe2, 0x24, 0x63,
	0x77, 0x85, 0x8a, 0x55, 0xca, 0xb7, 0xa4, 0x07, 0x4d, 0xa5, 0x85, 0x28, 0xa5, 0x81, 0xd5, 0xb7,
	0x86, 0xce, 0xa4, 0xf6, 0xfc, 0xbb, 0x77, 0x15, 0x36, 0x50, 0x9d, 0x51, 0xf2, 0x1a, 0xbc, 0x74,
	0x2b, 0x59, 0xae, 0x18, 0x8d, 0x72, 0xbe, 0x93, 0x81, 0xdd, 0x77, 0x86, 0x6e, 0xe8, 0x56, 0x62,
	0xc8, 0x77, 0x92, 0xbc, 0x02, 0xb7, 0x10, 0x34, 0x3e, 0x32, 0x0e, 0x32, 0xed, 0x52, 0x43, 0xa4,
	0x07, 0x6d, 0xca, 0x32, 0xa6, 0x91, 0x94, 0xca, 0xa0, 0xd6, 0x77, 0x86, 0x4e, 0x08, 0xa5, 0x34,
	0xa3, 0x17, 0x80, 0x58, 0xcb, 0xe0, 0x1a, 0x47, 0x54, 0xc0, 0x7c, 0x8d, 0x26, 0x15, 0x80, 0x26,
	0x75, 0x63, 0x52, 0x6a, 0x68, 0xf2, 0x1e, 0x9a, 0x92, 0x3d, 0x16, 0x6c, 0xbb, 0x64, 0x41, 0xa3,
	0xef, 0x0c, 0x3b, 0x63, 0x7f, 0x24, 0x92, 0x51, 0xf5, 0xb5, 0x8b, 0xbd, 0x60, 0xe1, 0x91, 0x18,
	0x48, 0xf0, 0xe6, 0x39, 0xdb, 0xe5, 0xa9, 0x62, 0x0f, 0x71, 0x56, 0x30, 0xf2, 0x0e, 0x3a, 0x72,
	0xf9, 0x9d, 0x6d, 0xe2, 0xe8, 0x89, 0xe5, 0x32, 0xe5, 0xdb, 0x8b, 0x48, 0x3c, 0xd3, 0x7b, 0x30,
	0x2d, 0xf2, 0x09, 0x5a, 0x9b, 0x72, 0xae, 0x09, 0xa5, 0x3d, 0xfe, 0x4f, 0x9b, 0x5d, 0xe4, 0x5b,
	0x1e, 0x3d, 0x91, 0x83, 0xbf, 0x16, 0xd4, 0x27, 0xb8, 0x2d, 0xf2, 0x06, 0x6c, 0x25, 0xd0, 0xa2,
	0x33, 0xee, 0xe8, 0xa3, 0x46, 0xd7, 0x6f, 0x59, 0x9e, 0xb3, 0x95, 0xd0, 0x1b, 0x92, 0x2a, 0xce,
	0x55, 0xa4, 0xb4, 0xcd, 0xd9, 0x86, 0x50, 0x5d, 0xe8, 0x5c, 0x5a, 0x4b, 0xbe, 0xd9, 0xa4, 0x48,
	0x38, 0x67, 0x44, 0xd3, 0xc8, 0x88, 0xb8, 0xa2, 0xfc, 0xd2, 0x68, 0xcd, 0xf6, 0x41, 0xad, 0x6f,
	0xe9, 0xe8, 0x2a, 0xed, 0x96, 0xed, 0xc9, 0x5b, 0xe8, 0x1c, 0x91, 0x27, 0x9d, 0x46, 0x70, 0x8d,
	0x90, 0x27, 0x2e, 0x22, 0x7a, 0x09, 0x2d, 0x4a, 0xb3, 0xe8, 0xb1, 0x60, 0xf9, 0x3e, 0xa8, 0x23,
	0xd1, 0xa4, 0x34, 0xbb, 0xd7, 0x35, 0x19, 0x00, 0xe8, 0xe6, 0x0f, 0x9e, 0xe8, 0xeb, 0xd4, 0x38,
	0x7f, 0x15, 0x4a, 0xb3, 0x2f, 0x3c, 0x99, 0xd1, 0x9b, 0x7b, 0x70, 0xcf, 0xd7, 0x41, 0x00, 0xea,
	0x33, 0xbc, 0x4a, 0xfe, 0x95, 0x7e, 0xfe, 0x86, 0x57, 0xc6, 0xb7, 0x88, 0x0b, 0xcd, 0x29, 0x6e,
	0x76, 0x36, 0xf5, 0xed, 0x53, 0x35, 0xbf, 0xf5, 0x1d, 0xe2, 0x41, 0xcb, 0x54, 0x21, 0xdf, 0xf9,
	0xb5, 0x9b, 0x3b, 0x80, 0x53, 0x72, 0x1a, 0xad, 0xb6, 0x6a, 0x46, 0x7e, 0xc6, 0x14, 0xcc, 0xc8,
	0x90, 0x67, 0x59, 0x12, 0x2f, 0xd7, 0xbe, 0xad, 0x3b, 0xf3, 0x9c, 0x4d, 0xa7, 0x5f, 0x7d, 0x87,
	0xb4, 0xa1, 0x31, 0xe7, 0x52, 0xe9, 0xa2, 0x36, 0x71, 0x9f, 0x0f, 0x5d, 0xeb, 0xd7, 0xa1, 0x6b,
	0xfd, 0x39, 0x74, 0xad, 0xa4, 0x8e, 0x7f, 0xce, 0xc7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c,
	0x63, 0xf6, 0x39, 0x63, 0x03, 0x00, 0x00,
}
