// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pump.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WriteBinlogReq struct {
	// The identifier of tidb-cluster, which is given at tidb startup.
	// Must specify the clusterID for each binlog to write.
	ClusterID uint64 `protobuf:"varint,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	// Payload bytes can be decoded back to binlog struct by the protobuf.
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteBinlogReq) Reset()         { *m = WriteBinlogReq{} }
func (m *WriteBinlogReq) String() string { return proto.CompactTextString(m) }
func (*WriteBinlogReq) ProtoMessage()    {}
func (*WriteBinlogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{0}
}

func (m *WriteBinlogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteBinlogReq.Unmarshal(m, b)
}
func (m *WriteBinlogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteBinlogReq.Marshal(b, m, deterministic)
}
func (m *WriteBinlogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBinlogReq.Merge(m, src)
}
func (m *WriteBinlogReq) XXX_Size() int {
	return xxx_messageInfo_WriteBinlogReq.Size(m)
}
func (m *WriteBinlogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBinlogReq.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBinlogReq proto.InternalMessageInfo

func (m *WriteBinlogReq) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *WriteBinlogReq) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type WriteBinlogResp struct {
	// An empty errmsg returned means a successful write.
	// Otherwise return the error description.
	Errmsg               string   `protobuf:"bytes,1,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteBinlogResp) Reset()         { *m = WriteBinlogResp{} }
func (m *WriteBinlogResp) String() string { return proto.CompactTextString(m) }
func (*WriteBinlogResp) ProtoMessage()    {}
func (*WriteBinlogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{1}
}

func (m *WriteBinlogResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteBinlogResp.Unmarshal(m, b)
}
func (m *WriteBinlogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteBinlogResp.Marshal(b, m, deterministic)
}
func (m *WriteBinlogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBinlogResp.Merge(m, src)
}
func (m *WriteBinlogResp) XXX_Size() int {
	return xxx_messageInfo_WriteBinlogResp.Size(m)
}
func (m *WriteBinlogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBinlogResp.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBinlogResp proto.InternalMessageInfo

func (m *WriteBinlogResp) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

type PullBinlogReq struct {
	// Specifies which clusterID of binlog to pull.
	ClusterID uint64 `protobuf:"varint,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	// The position from which the binlog will be sent.
	StartFrom            *Pos     `protobuf:"bytes,2,opt,name=startFrom,proto3" json:"startFrom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullBinlogReq) Reset()         { *m = PullBinlogReq{} }
func (m *PullBinlogReq) String() string { return proto.CompactTextString(m) }
func (*PullBinlogReq) ProtoMessage()    {}
func (*PullBinlogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{2}
}

func (m *PullBinlogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullBinlogReq.Unmarshal(m, b)
}
func (m *PullBinlogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullBinlogReq.Marshal(b, m, deterministic)
}
func (m *PullBinlogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullBinlogReq.Merge(m, src)
}
func (m *PullBinlogReq) XXX_Size() int {
	return xxx_messageInfo_PullBinlogReq.Size(m)
}
func (m *PullBinlogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PullBinlogReq.DiscardUnknown(m)
}

var xxx_messageInfo_PullBinlogReq proto.InternalMessageInfo

func (m *PullBinlogReq) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *PullBinlogReq) GetStartFrom() *Pos {
	if m != nil {
		return m.StartFrom
	}
	return nil
}

type PullBinlogResp struct {
	// The binlog entity that send in a stream
	Entity               *Entity  `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullBinlogResp) Reset()         { *m = PullBinlogResp{} }
func (m *PullBinlogResp) String() string { return proto.CompactTextString(m) }
func (*PullBinlogResp) ProtoMessage()    {}
func (*PullBinlogResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{3}
}

func (m *PullBinlogResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullBinlogResp.Unmarshal(m, b)
}
func (m *PullBinlogResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullBinlogResp.Marshal(b, m, deterministic)
}
func (m *PullBinlogResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullBinlogResp.Merge(m, src)
}
func (m *PullBinlogResp) XXX_Size() int {
	return xxx_messageInfo_PullBinlogResp.Size(m)
}
func (m *PullBinlogResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PullBinlogResp.DiscardUnknown(m)
}

var xxx_messageInfo_PullBinlogResp proto.InternalMessageInfo

func (m *PullBinlogResp) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

// Binlogs are stored in a number of sequential files in a directory.
// The Pos describes the position of a binlog.
type Pos struct {
	// The suffix of binlog file, like .000001 .000002
	Suffix uint64 `protobuf:"varint,1,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// The binlog offset in a file.
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pos) Reset()         { *m = Pos{} }
func (m *Pos) String() string { return proto.CompactTextString(m) }
func (*Pos) ProtoMessage()    {}
func (*Pos) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{4}
}

func (m *Pos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pos.Unmarshal(m, b)
}
func (m *Pos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pos.Marshal(b, m, deterministic)
}
func (m *Pos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pos.Merge(m, src)
}
func (m *Pos) XXX_Size() int {
	return xxx_messageInfo_Pos.Size(m)
}
func (m *Pos) XXX_DiscardUnknown() {
	xxx_messageInfo_Pos.DiscardUnknown(m)
}

var xxx_messageInfo_Pos proto.InternalMessageInfo

func (m *Pos) GetSuffix() uint64 {
	if m != nil {
		return m.Suffix
	}
	return 0
}

func (m *Pos) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// Meta saves the binlog's meta information.
type Meta struct {
	// The binlog's start ts, used in Prewrite, Commit and Rollback type binlog.
	StartTs int64 `protobuf:"varint,1,opt,name=startTs,proto3" json:"startTs,omitempty"`
	// The binlog's commit ts, used only in Commit type binlog.
	CommitTs             int64    `protobuf:"varint,2,opt,name=commitTs,proto3" json:"commitTs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{5}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetStartTs() int64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *Meta) GetCommitTs() int64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

type Entity struct {
	// The position of the binlog entity.
	Pos *Pos `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	// The payload of binlog entity.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// checksum of binlog payload.
	Checksum []byte `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// The meta information of the binlog entity.
	Meta                 *Meta    `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d140275d3b8185f, []int{6}
}

func (m *Entity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entity.Unmarshal(m, b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return xxx_messageInfo_Entity.Size(m)
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetPos() *Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Entity) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Entity) GetChecksum() []byte {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (m *Entity) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*WriteBinlogReq)(nil), "pb.WriteBinlogReq")
	proto.RegisterType((*WriteBinlogResp)(nil), "pb.WriteBinlogResp")
	proto.RegisterType((*PullBinlogReq)(nil), "pb.PullBinlogReq")
	proto.RegisterType((*PullBinlogResp)(nil), "pb.PullBinlogResp")
	proto.RegisterType((*Pos)(nil), "pb.Pos")
	proto.RegisterType((*Meta)(nil), "pb.Meta")
	proto.RegisterType((*Entity)(nil), "pb.Entity")
}

func init() { proto.RegisterFile("pump.proto", fileDescriptor_3d140275d3b8185f) }

var fileDescriptor_3d140275d3b8185f = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0xdb, 0x30,
	0x1c, 0x8d, 0x62, 0xe3, 0x24, 0xbf, 0x64, 0x19, 0xd3, 0xc6, 0x30, 0x66, 0x24, 0x41, 0xa7, 0x8c,
	0x41, 0x36, 0x32, 0x06, 0xa3, 0xf4, 0x14, 0xda, 0xd2, 0x1e, 0x0a, 0xc6, 0x14, 0x0a, 0xbd, 0x39,
	0xa9, 0xec, 0x9a, 0x5a, 0x91, 0x6a, 0xc9, 0xd0, 0xf4, 0xda, 0x2f, 0x97, 0x63, 0x3f, 0x41, 0x29,
	0xf9, 0x24, 0x45, 0x8a, 0xf2, 0xb7, 0x14, 0x7a, 0xf3, 0x7b, 0xcf, 0xef, 0xfd, 0x9e, 0x7e, 0x12,
	0x80, 0x28, 0x99, 0x18, 0x88, 0x82, 0x2b, 0x8e, 0xab, 0x62, 0x1c, 0x7c, 0x4b, 0x79, 0xca, 0x0d,
	0xfc, 0xad, 0xbf, 0x96, 0x0a, 0x39, 0x85, 0xf6, 0x65, 0x91, 0x29, 0x3a, 0xca, 0xa6, 0x39, 0x4f,
	0x23, 0x7a, 0x87, 0x7f, 0x40, 0x63, 0x92, 0x97, 0x52, 0xd1, 0xe2, 0xec, 0xc8, 0x47, 0x3d, 0xd4,
	0x77, 0xa3, 0x0d, 0x81, 0x7d, 0xa8, 0x89, 0x78, 0x96, 0xf3, 0xf8, 0xda, 0xaf, 0xf6, 0x50, 0xbf,
	0x15, 0xad, 0x20, 0xf9, 0x09, 0x9f, 0x77, 0x92, 0xa4, 0xc0, 0xdf, 0xc1, 0xa3, 0x45, 0xc1, 0x64,
	0x6a, 0x72, 0x1a, 0x91, 0x45, 0xe4, 0x0a, 0x3e, 0x85, 0x65, 0x9e, 0x7f, 0x74, 0xe6, 0x2f, 0x68,
	0x48, 0x15, 0x17, 0xea, 0xa4, 0xe0, 0xcc, 0x4c, 0x6d, 0x0e, 0x6b, 0x03, 0x31, 0x1e, 0x84, 0x5c,
	0x8e, 0xdc, 0xf9, 0x73, 0xb7, 0x12, 0x6d, 0x74, 0x72, 0x00, 0xed, 0xed, 0x6c, 0x29, 0x70, 0x1f,
	0x3c, 0x3a, 0x55, 0x99, 0x9a, 0x99, 0xe4, 0xe6, 0x10, 0xb4, 0xf7, 0xd8, 0x30, 0xd6, 0x6e, 0x75,
	0xf2, 0x0f, 0x9c, 0x90, 0x4b, 0x5d, 0x5b, 0x96, 0x49, 0x92, 0xdd, 0xdb, 0x2a, 0x16, 0x69, 0x9e,
	0x27, 0x89, 0xa4, 0xca, 0x94, 0x70, 0x22, 0x8b, 0xc8, 0x21, 0xb8, 0xe7, 0x54, 0xc5, 0x7a, 0x37,
	0xa6, 0xc7, 0x85, 0x34, 0x46, 0x27, 0x5a, 0x41, 0x1c, 0x40, 0x7d, 0xc2, 0x19, 0xcb, 0xb4, 0xb4,
	0xf4, 0xae, 0x31, 0x79, 0x44, 0xe0, 0x2d, 0xdb, 0xe0, 0x2e, 0x38, 0x82, 0x4b, 0x5b, 0x73, 0xef,
	0x88, 0x5a, 0x79, 0x7f, 0xfb, 0x66, 0xc2, 0x0d, 0x9d, 0xdc, 0xca, 0x92, 0xf9, 0x8e, 0x91, 0xd6,
	0x18, 0x13, 0x70, 0x19, 0x55, 0xb1, 0xef, 0x9a, 0xdc, 0xba, 0xce, 0xd5, 0x7d, 0x6d, 0xb0, 0xd1,
	0x86, 0x0f, 0xe0, 0x86, 0x25, 0x13, 0xf8, 0x3f, 0x34, 0xb7, 0x6e, 0x11, 0x63, 0xfd, 0xf3, 0xee,
	0x03, 0x09, 0xbe, 0xbe, 0xe1, 0xa4, 0x20, 0x15, 0xed, 0xdc, 0x2c, 0x5e, 0xe2, 0x2f, 0xa6, 0xfe,
	0xf6, 0x2d, 0x07, 0x78, 0x9f, 0xd2, 0xbe, 0x3f, 0x68, 0xd4, 0x9a, 0x2f, 0x3a, 0xe8, 0x69, 0xd1,
	0x41, 0x2f, 0x8b, 0x0e, 0x1a, 0x7b, 0xe6, 0x61, 0xfe, 0x7d, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0e,
	0x3f, 0xb2, 0x4e, 0xc0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PumpClient is the client API for Pump service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PumpClient interface {
	// Writes a binlog to the local file on the pump machine.
	// A response with an empty errmsg is returned if the binlog is written successfully.
	WriteBinlog(ctx context.Context, in *WriteBinlogReq, opts ...grpc.CallOption) (*WriteBinlogResp, error)
	// Sends binlog stream from a given location.
	PullBinlogs(ctx context.Context, in *PullBinlogReq, opts ...grpc.CallOption) (Pump_PullBinlogsClient, error)
}

type pumpClient struct {
	cc *grpc.ClientConn
}

func NewPumpClient(cc *grpc.ClientConn) PumpClient {
	return &pumpClient{cc}
}

func (c *pumpClient) WriteBinlog(ctx context.Context, in *WriteBinlogReq, opts ...grpc.CallOption) (*WriteBinlogResp, error) {
	out := new(WriteBinlogResp)
	err := c.cc.Invoke(ctx, "/pb.Pump/WriteBinlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pumpClient) PullBinlogs(ctx context.Context, in *PullBinlogReq, opts ...grpc.CallOption) (Pump_PullBinlogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pump_serviceDesc.Streams[0], "/pb.Pump/PullBinlogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &pumpPullBinlogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pump_PullBinlogsClient interface {
	Recv() (*PullBinlogResp, error)
	grpc.ClientStream
}

type pumpPullBinlogsClient struct {
	grpc.ClientStream
}

func (x *pumpPullBinlogsClient) Recv() (*PullBinlogResp, error) {
	m := new(PullBinlogResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PumpServer is the server API for Pump service.
type PumpServer interface {
	// Writes a binlog to the local file on the pump machine.
	// A response with an empty errmsg is returned if the binlog is written successfully.
	WriteBinlog(context.Context, *WriteBinlogReq) (*WriteBinlogResp, error)
	// Sends binlog stream from a given location.
	PullBinlogs(*PullBinlogReq, Pump_PullBinlogsServer) error
}

// UnimplementedPumpServer can be embedded to have forward compatible implementations.
type UnimplementedPumpServer struct {
}

func (*UnimplementedPumpServer) WriteBinlog(ctx context.Context, req *WriteBinlogReq) (*WriteBinlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBinlog not implemented")
}
func (*UnimplementedPumpServer) PullBinlogs(req *PullBinlogReq, srv Pump_PullBinlogsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullBinlogs not implemented")
}

func RegisterPumpServer(s *grpc.Server, srv PumpServer) {
	s.RegisterService(&_Pump_serviceDesc, srv)
}

func _Pump_WriteBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBinlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PumpServer).WriteBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pump/WriteBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PumpServer).WriteBinlog(ctx, req.(*WriteBinlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pump_PullBinlogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullBinlogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PumpServer).PullBinlogs(m, &pumpPullBinlogsServer{stream})
}

type Pump_PullBinlogsServer interface {
	Send(*PullBinlogResp) error
	grpc.ServerStream
}

type pumpPullBinlogsServer struct {
	grpc.ServerStream
}

func (x *pumpPullBinlogsServer) Send(m *PullBinlogResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Pump_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Pump",
	HandlerType: (*PumpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteBinlog",
			Handler:    _Pump_WriteBinlog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullBinlogs",
			Handler:       _Pump_PullBinlogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pump.proto",
}
